// Generated by Selenium IDE
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import java.time.Duration;
import java.util.*;

public class OdstranenieProduktovZKosikaTest {
  private WebDriver driver;
  private Map<String, Object> vars;
  JavascriptExecutor js;
  @Before
  public void setUp() {
    driver = new ChromeDriver();
    js = (JavascriptExecutor) driver;
    vars = new HashMap<String, Object>();
  }
  @After
  public void tearDown() {
    driver.quit();
  }
  @Test
  public void odstranenieproduktovzkosika() {
    driver.get("https://www.martinus.sk/");
    driver.manage().window().maximize();
    WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
    wait.until(ExpectedConditions.elementToBeClickable(By.id("CybotCookiebotDialogBodyLevelButtonLevelOptinAllowAll"))).click();
    driver.findElement(By.cssSelector(".header-user__name")).click();
    {
      WebElement element = driver.findElement(By.linkText("Prihlásiť"));
      Actions builder = new Actions(driver);
      builder.moveToElement(element).perform();
    }
    driver.findElement(By.id("email")).click();
    driver.findElement(By.id("email")).sendKeys("mizukage295@gmail.com");
    driver.findElement(By.cssSelector(".mj-next-button")).click();
    {
      WebElement element = driver.findElement(By.cssSelector(".mj-next-button"));
      Actions builder = new Actions(driver);
      builder.moveToElement(element).perform();
    }
    {
      WebElement element = driver.findElement(By.tagName("body"));
      Actions builder = new Actions(driver);
      builder.moveToElement(element, 0, 0).perform();
    }
    driver.findElement(By.id("heslo")).sendKeys("zts2023sem");
    driver.findElement(By.id("heslo")).sendKeys(Keys.ENTER);
    driver.findElement(By.linkText("Knihy")).click();
    driver.findElement(By.linkText("Sci-fi a fantasy")).click();
    js.executeScript("window.scrollTo(0,354.3999938964844)");
    driver.findElement(By.cssSelector(".listing__item:nth-child(1) .link--product")).click();
    driver.findElement(By.cssSelector(".flex-1 > form .btn--primary")).click();
    {
      WebElement element = driver.findElement(By.cssSelector(".flex-1 > form .btn--primary"));
      Actions builder = new Actions(driver);
      builder.moveToElement(element).perform();
    }
    driver.navigate().back();
    {
      WebElement element = driver.findElement(By.tagName("body"));
      Actions builder = new Actions(driver);
      builder.moveToElement(element, 0, 0).perform();
    }
    driver.findElement(By.cssSelector(".header-btn > .fa-basket-shopping > path")).click();
    driver.findElement(By.cssSelector(".mj-cart__form > .row")).click();
    {
      WebElement element = driver.findElement(By.cssSelector(".mj-remove-product-2277257 > .svg-inline--fa"));
      Actions builder = new Actions(driver);
      builder.moveToElement(element).perform();
    }
    {
      WebElement element = driver.findElement(By.tagName("body"));
      Actions builder = new Actions(driver);
      builder.moveToElement(element, 0, 0).perform();
    }
    {
      WebElement element = driver.findElement(By.cssSelector(".mj-remove-product-2277257 > .svg-inline--fa"));
      Actions builder = new Actions(driver);
      builder.moveToElement(element).perform();
      builder.click().perform();
    }
    wait = new WebDriverWait(driver, Duration.ofSeconds(10));
    wait.until(ExpectedConditions.stalenessOf(driver.findElement(By.cssSelector(".mj-remove-product-2277257 > .svg-inline--fa"))));
    WebElement emptyBasketMessage = wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector(".mt-medium")));
    assertEquals("Toto je smutný košík, lebo je zatiaľ prázdny :-( Naplňte ho niečím dobrým a on sa poteší. Pripájame pár tipov :-)", emptyBasketMessage.getText());
    driver.findElement(By.cssSelector(".header-user__name")).click();
    driver.findElement(By.linkText("Odhlásiť")).click();
    driver.findElement(By.cssSelector("a > .show-l")).click();
  }
}
